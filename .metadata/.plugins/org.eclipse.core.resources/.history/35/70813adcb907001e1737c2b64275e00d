package com.blog.app.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.blog.app.entity.Album;
import com.blog.app.entity.Posts;
import com.blog.app.entity.User;
import com.blog.app.repository.IUserRepository;
import com.blog.app.service.IUserService;

@RestController
@RequestMapping("/api/users")
public class UserController {
 
	@Autowired
	private IUserService userService;
	

	//  -------- To Get User By ID ---------
	@GetMapping("/{id}")
	public ResponseEntity<User> getUser(@PathVariable Long id){
		ResponseEntity<User> response = new ResponseEntity<User>(this.userService.getUserById(id),HttpStatus.CREATED);
		return response;
	}
	
	//  -------- To Update User ---------
	@PutMapping("")
	public ResponseEntity<User> updateUser(@RequestBody User user){
		ResponseEntity<User> response = new ResponseEntity<User>(this.userService.updateUser(user),HttpStatus.OK);
		return response;
	}
	
	//  -------- To Get Posts created by User By UserName ---------
	@GetMapping("/{userName}/posts")
	public ResponseEntity<List<Posts>> getPostsOfUser(@PathVariable String userName){
		  ResponseEntity<List<Posts>> response = new ResponseEntity<List<Posts>>(this.userService.getPostsOfUser(userName),HttpStatus.OK);
		  return response;
	}
	
	//  -------- To Get ALbums created by User By UserName ---------
	@GetMapping("/{userName}/albums")
	public ResponseEntity<List<Album>> getAlbumsOfUser(@PathVariable String userName){
		  ResponseEntity<List<Album>> response = new ResponseEntity<List<Album>>(this.userService.getAlbumsOfUser(userName),HttpStatus.OK);
		  return response;
	}
    
//  -------- To Check userName is Available or Not  ---------
	@GetMapping("/checkUsernameAvailability/{userName}")
	public ResponseEntity<String> checkUsernameAvailability(@PathVariable String userName){
		  ResponseEntity<String> response = new ResponseEntity<String>(this.userService.checkUsernameAvailability(userName),HttpStatus.OK);
		  return response;
	}
	
//  -------- To Check Email is Available or Not  ---------
	@GetMapping("/checkEmailAvailability/{email}")
	public ResponseEntity<String> checkEmailAvailability(@PathVariable String email){
		  ResponseEntity<String> response = new ResponseEntity<String>(this.userService.checkEmailAvailability(email),HttpStatus.OK);
		  return response;
	}	
}
